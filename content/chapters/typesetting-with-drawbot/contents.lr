_model: chapter
---
title: Typesetting with DrawBot
---
abstract: Finally drawing text into DrawBot, single or multiple lines
---
sort_key: 11
---
visual_abstract: abstract-10.svg
---
og_image: abstract-10.png
---
body:

#### section-title ####
content: From Characters to Glyphs
----
class: default
----
#### text-block ####
content: The question we still need to answer concerning text is how to draw it. Let’s observe the process of typing on a keyboard:
----
#### text-block ####
content: + a key is pressed (usually with a finger, sometimes by your cat)
+ a number mapped to that key is sent to the Operating System
+ the OS converts the number to a character using an encoding – most of the times the reference is Unicode
+ the character is drawn on the screen with a custom or standard font
----
#### image ####
name: key_diagram.svg
----
class: large-image
----
#### image ####
name: different_a.svg
----
class: small-image
----
#### text-block ####
content: The drawing of the character appearing on the screen does not come from the Unicode encoding itself. It is stored in a different container: a font. The Unicode encoding is only an intermediate dictionary used to pick the right drawing from the font. In fact the Unicode encoding contains only characters descriptions and their organization. A font file is the translation of the typographer’s case to digital data. The term commonly used for the prefabricated representation of a character is ‘glyph’. Think of the character as an abstract idea, a collection of common features that make a sign recognizable as such. For example, let’s describe the notion of a capital A we mutually share: two diagonal lines connecting on top and diverging at the bottom plus a horizontal bar intersecting with both diagonal lines, usually placed halfway between top and bottom.
It is a rather generic description. Many different drawings can fall into that. They can have serifs or not, they could be stenciled, they could be fat or thin, wide or narrow, and so on. Take also into account that many representations could be recognized as capital A and fall outside that description. It’s hard, or maybe impossible, to put together the right description.
----
#### image ####
name: encoding.svg
----
class: large-image
----
#### text-block ####
content: During the era of metal type, lead glyphs were stored into special drawers with a standard organization. Did you know that terms *uppercase* and *lowercase* derive by such organization?
----
#### image ####
name: lower-upper-case.svg
----
class: large-image
----
#### text-block ####
content: These drawers were then stored into cabinets. Usually, a cabinet would contain different related sizes or styles. Related how? Well, they would share some formal features that would make them look related, as the different faces of people who are part of the same family.

In fact, this kind of collection forms a font family.
Note that the term *typeface* is instead used to refer to the common features shared across a collection; it is a way more abstract terminology.
----
#### image ####
name: cabinet.svg
----
class: small-image
----
#### text-block ####
content: As you may have inferred, at that time, each font (think about the cabinet’s drawer filled with metal type) was size-specific. Things changed after the introduction of cubic and quadratic outlines, when a font was not tied anymore to a specific size. Nevertheless, reading distance and body size are still crucial aspects in the reading experience. Our eyes did not change with the digital transformation of typography. So, when using a font, check if the designer made it with a specific range of sizes in mind; even if you are allowed to scale it to any size without losing detail.
----
#### section-title ####
content: Setting One Line of Text
----
class: default
----
#### text-block ####
content: The minimum setting action in DrawBot related to type is the composition of single lines of glyphs. In order to do so we have to make a number of decisions upfront:
----
#### text-block ####
content: + which characters have to be drawn, the content
+ the position of the text line on the canvas
+ the font from which the glyphs should be picked up
+ body size
+ fill and stroke color
----
#### text-block ####
content: DrawBot has some fallback options if we are too lazy to specify all of them. But content and position are mandatory. They are, in fact, the arguments of the <code>text()</code> function:
----
#### code-example ####
snippet: 01.py
----
image: text.png
----
#### text-block ####
content: The origin of the position coordinates is the lower left point of the composition. Take into account that the first glyph might have some left margin, meaning that the black shapes will not touch the coordinate point. You can simply test the behaviour:
----
#### code-example ####
snippet: 02.py
----
image: text-rect.png
----
#### text-block ####
content: The other choices have to be set with specific functions and must be defined before the <code>text()</code> function is invoked.

<code>font()</code> defines the font used to draw the characters. It accepts a string argument. It should be the name of a PostScript font already installed on your computer.
----
#### code-example ####
snippet: 03.py
----
image: text-font.png
----
#### text-block ####
content: DrawBot provides a function able to make a list of the PostScript fonts installed on your computer. <code>installedFonts()</code> accepts an optional string argument with characters which should be supported by the listed fonts. 

For example, you could use it in the following way:
----
#### code-example ####
snippet: 04.py
----
#### text-block ####
content: The names printed in the console are the fonts that support the <code>'ЉДЖ'</code> cyrillic characters.

The body size is handled by the function <code>fontSize()</code>. It accepts a numerical value either an integer or float. The function sets the size in PostScript points, the default being 10pt.
----
#### code-example ####
snippet: 05.py
----
image: text-fontSize.png
----
#### text-block ####
content: Color and stroke are defined by <code>fill()</code> and <code>stroke()</code>.
----
#### code-example ####
snippet: 06.py
----
image: text-fill.png
----
#### text-block ####
content: Once defined, these settings will be applied to all shapes drawn afterwards. To change these options. just call the functions again.
----
#### section-title ####
content: Setting Multiple Lines of Text
----
class: default
----
#### text-block ####
content: Typesetting is a discipline whose goal is to arrange language within a set of physical constraints. These limits are usually the borders of the canvas. This is why a long sequence of characters cannot be displayed in just one line. The sequence has to be broken in multiple lines. 

We are used to sequences of broken lines of text. These entities are the building blocks of typesetting, they are called paragraphs. When approaching the typesetting of a paragraph we should take into consideration a few extra options compared to a single line.
----
#### image ####
name: textbox.svg
----
class: large-image
----
#### text-block ####
content: First of all, we should use a different function than <code>text()</code>. It would be possible to deal with line breaking ourselves, but DrawBot is generous enough to provide a function which will take care of it automatically: <code>textBox()</code>. Unlike <code>text()</code>, the glyph sequence fits into a rectangle. The function accepts a string as first argument, followed by what’s necessary to define the rectangle <code>(x, y, width, height)</code> and, as optional argument, the alignment of the text.
----
#### code-example ####
snippet: 07.py
----
image: someText.png
----
#### text-block ####
content: If you want to see the box which contains the text, just use a <code>rect()</code> function with the same arguments:
----
#### code-example ####
snippet: 08.py
----
image: text-box-rect.png
----
#### text-block ####
content: If some text does not fit the provided rectangle, textBox() will return it. This feature, combined with a while loop, can be used to add new pages until the text is all set on canvas.
----
#### code-example ####
snippet: 09.py
----
diagram: 2pages.svg
----
#### text-block ####
content: Most of the decisions we have to make when setting multiple lines of type have to do with the space surrounding the glyphs. Of course, fonts already provide some standard concerning proportions between glyphs, but a typographer has a few tools to enhance the composition according to a specific context.

The vertical distribution of space in a paragraph is handled by the <code>lineHeight()</code> function. It is commonly called leading, a term which comes from the metal days of type. It refers to the stripes of non-printing metal which would be inserted between lines of type. In a digital environment the leading value defines the distance between one baseline and the next. 
----
#### image ####
name: leading.svg
----
class: large-image
----
#### text-block ####
content: Take also into account that the are no physical restrictions on a digital canvas, meaning that the leading value can be inferior to the body size or even negative.
----
#### code-example ####
snippet: 10.py
----
diagram: 2pagesleading.svg
----
#### text-block ####
content: The DrawBot default is pointSize * 1.2.

Fonts already contain a lot of information concerning the horizontal distribution of space. As we saw in the previous chapters, white is as important as black. A type designer will provide the font with all the necessary data to compose a good paragraph of text. Think twice about overriding this information. It is a distortion of type as much as a non-proportional scaling. Well, maybe a bit more subtle, but a trained eye will recognize it immediately.

But, there are a few cases where it makes sense to alter the composition with some inner-character extra space. The <code>tracking()</code> function is here for this. Tracking –not to be confused with kerning– is the injection or subtraction of a fixed amount of white space between the glyphs. Text composed at small size, like 8pt, could benefit from some extra spacing.
----
#### image ####
name: tracking.svg
----
class: large-image
----
#### text-block ####
content: Breaking the lines of text could be painful for the visual quality of a paragraph. But, let’s face it, we have no other option: either we break the lines or we compose only poetry. Minimizing the negative effects of line breaking is part of a typographer’s job.
There are decisions that influence the quality of the right side of a paragraph more than others: average font width in relation to box width, justified alignment versus ragged alignment and hyphenation, etc.

Hyphenation is a feature which allows the digital composer to break a line using word syllables, not only spaces between words. This option adds many breaking options making the process of breaking a line less harmful for the paragraph of text. Having said that, reading a word split on two lines could be not that comfortable, especially if we are not very used to it or if the word is very short.

Take into account that syllables have different definitions across different languages, so remember to set the right language using the <code>language()</code> function. The default is English.
----
#### code-example ####
snippet: 11.py
----
diagram: language.svg
----
#### text-block ####
content: Hyphenation settings resonate enormously with the justified alignment. This method of composition creates an even right edge by injecting extra space between words. Too much extra space makes the paragraph very uncomfortable to read, so the ability to break the line within a word is critical.
----
#### image ####
name: giustificazione.svg
----
class: large-image
----
#### text-block ####
content: In other words, if a paragraph has a narrow width, justified alignment and no hyphenation, it is very likely that the word space will start to appear across consequent lines emerging from the paragraph texture. These are the so-called rivers.
----
#### exercise ####
assignment: Create a paragraph with many "rivers" of white.
----
#### image ####
name: hyphenation.svg
----
class: large-image
----
#### code-example ####
snippet: 12.py
----
---
hasTocNumber: yes
