_model: chapter
---
title: How to Browse Sequences
---
abstract: Never heard of tuples and lists? Here we go!
---
sort_key: 12
---
visual_abstract: abstract-11.svg
---
og_image: abstract-11.png
---
body:

#### text-block ####
content: We already had a taste of what sequences are thanks to strings. But strings only include  text. What if we need to store a bunch of numerical values? Or some strings together with numerical values?

Python provides two standard data types for containers where order matters: a mutable one, <code>list()</code>, and an immutable one, <code>tuple()</code>. They store an ordered sequence of *value references*. This means that if a list contains another list – of course this is possible – the inner one will not be copied inside the container, but a reference to it will be stored.

In Python a list is delimited by the characters <code>[]</code>, while a tuple is delimited by characters <code>()</code>.

Here’s a list:
----
#### code-example ####
snippet: 01.py
----
#### image ####
name: list.svg
----
class: large-image
----
#### text-block ####
content: Now, this is a tuple:
----
#### code-example ####
snippet: 02.py
----
#### image ####
name: tuple.svg
----
class: large-image
----
#### text-block ####
content: As we said, elements in lists and tuples are of arbitrary nature: they can be any kind of object, <code>None</code> included. They can be empty too.

Emptiness usually does not make much sense for tuples, given they cannot be modified once created. Instead it is very common to initiate an empty list which will be populated during an iterative process triggered by a <code>while</code> or <code>for</code> construct. Consider the following example:
----
#### code-example ####
snippet: 03.py
----
#### text-block ####
content: The constructors <code>list()</code> and <code>tuple()</code> accept any kind of iterable as argument like strings or lists or tuples. They “listify” or “tuplefy” their arguments. For example, if a string is passed as argument to a <code>list()</code> function, the result will be a container where each character is stored separately:
----
#### code-example ####
snippet: 04.py
----
#### text-block ####
content: At this point, you might ask yourself: why both tuples and lists? Aren’t lists enough? Apart from the difference in terms of mutability, there is a semantic difference in the usage of tuples and lists.

While tuples are used to store heterogeneous data structures, lists are ordered sequences of the same stuff. Take note that they have the same degree of freedom concerning data types, it’s just a matter of semantics.

Let’s consider the following scenario: it’s time for a quick ride on our bike and we would like to track our journey using an application installed on a smartphone. Let’s assume this application is written in Python. Every few seconds the application will ask the smartphone hardware for:
----
#### text-block ####
content: + gps coordinate x
+ gps coordinate y
+ date and time
----
#### code-example ####
snippet: 05.py
----
#### text-block ####
content: This data will be then organized in a tuple. Since the length of the container does not need to be flexible (e.g. we know we won’t add a z index to it) but just to record a state through multiple values, a tuple is a good choice.

The application’s goal is to track a route, which is a sequence of multiple position instances. So, the application needs a container which is flexible and can be extended until the end of the journey: a list.
----
#### code-example ####
snippet: 06.py
----
#### text-block ####
content: Once finished, the route of the journey is saved on the smartphone memory. A standard table would suit very well the purpose.
----
#### image ####
name: list-table.svg
----
class: large-image
----
#### section-title ####
content: Sequence Properties for Lists and Tuples
----
class: default
----
#### text-block ####
content: + accessing
+ slicing
+ check containment
+ test equality
+ natural order
+ concatenation
----
#### section-title ####
content: List Methods
----
class: default
----
#### text-block ####
content: As we said, a list is a flexible container, which means that once created, it can be manipulated in multiple ways. Python provides a few specific methods for it

.append(item)
----
#### code-example ####
snippet: 07.py
----
#### image ####
name: append.svg
----
class: large-image
----
#### text-block ####
content: .extend(iterable)
----
#### code-example ####
snippet: 08.py
----
#### image ####
name: extend.svg
----
class: large-image
----
#### text-block ####
content: .insert(index, item)
----
#### code-example ####
snippet: 09.py
----
#### image ####
name: insert.svg
----
class: large-image
----
#### exercise ####
assignment: transform a right-angled triangle in a square adding a point
----
#### text-block ####
content:     .remove(item)
----
#### code-example ####
snippet: 10.py
----
#### image ####
name: remove.svg
----
class: large-image
----
#### text-block ####
content: .pop(index)
----
#### code-example ####
snippet: 11.py
----
#### image ####
name: pop.svg
----
class: large-image
----
#### text-block ####
content: .index(item)
----
#### code-example ####
snippet: 12.py
----
#### image ####
name: index.svg
----
class: large-image
----
#### text-block ####
content: .sort()
----
#### code-example ####
snippet: 13.py
----
#### image ####
name: sort.svg
----
class: large-image
----
#### text-block ####
content: .reverse()
----
#### code-example ####
snippet: 14.py
----
#### image ####
name: reverse.svg
----
class: large-image
----
#### section-title ####
content: For Syntax
----
class: default
----
#### text-block ####
content: Python provides a for-loop syntax which is useful to iterate over a series of elements. Where <code>while</code> comes in handy when we need to keep doing something until a condition is matched, <code>for</code> is preferable when we need to browse a container. <code>for</code> can be used with any kind of *iterable*, which is a wider notion than sequences. Technically, an iterable can be non-sorted (as sets or dicts).

Here’s the general <code>for</code> construct:

----
#### code-example ####
snippet: 15.py
----
#### text-block ####
content: Note that the body is four spaces indented rightwards. <code>for</code> and <code>in</code> are protected keywords. <code>eachElement</code> is an identifier to which the body can refer to. Of course its name is arbitrary, it only needs to respect the standard rules for identifiers.
----
#### image ####
name: for.svg
----
class: large-image
----
#### text-block ####
content: The iterable can be created either before the <code>for</code> opening statement or created on the spot. Meaning that this example:
----
#### code-example ####
snippet: 16.py
----
#### text-block ####
content: is equivalent to:
----
#### code-example ####
snippet: 17.py
----
#### text-block ####
content: This also means that we could invoke a function which is able to generate an iterable on the spot
----
#### code-example ####
snippet: 18.py
----
#### text-block ####
content: Python provides a function that you will use very often in your coding routine: <code>range()</code>. This function returns an iterator –not a real list– which will provide a sequence of integers according to the following arguments
----
#### code-example ####
snippet: 19.py
----
#### text-block ####
content: <code>start</code> and <code>step</code> are optional. <code>start</code> has to be addressed if <code>step</code> is defined. Take into account that, as for the slicing notation, the <code>stop</code> value is not included into the range created.

This function will make the iteration over a sequence of integer number easy and compact:
----
#### code-example ####
snippet: 20.py
----
#### text-block ####
content: After the end of the loop the identifier will be still available in the program namespace, assigned to the last element of the iterable.
----
#### code-example ####
snippet: 21.py
----
#### text-block ####
content: How can this be useful in a graphic design application? Consider the following scenario: you would like to create a pdf document of sixteen pages and write on each page a sequential page number. DrawBot can do that of course:
----
#### image ####
name: 16pages.svg
----
class: large-image
----
#### code-example ####
snippet: 22.py
----
#### text-block ####
content: A for construct is the perfect companion of an <code>.append()</code>list method. It is very common to create a series of values starting from a pre-existing one. Like making an all-caps version of a word sequence:
----
#### code-example ####
snippet: 23.py
----
#### section-title ####
content: Drawing Many Times in One Direction
----
class: default
----
#### text-block ####
content: Just like the <code>while</code> construct, <code>for</code> can be very helpful to draw shapes repetitively. In this way your code will look compact and it will be easy to edit.

Instead of:
----
#### code-example ####
snippet: 24.py
----
image: 4lines.png
----
#### text-block ####
content: go for this kind of structure
----
#### code-example ####
snippet: 25.py
----
image: 4lines.png
----
#### text-block ####
content: The advantages of the second version are enormous, starting for the very basic fact that you can add and subtract elements with almost no changes.
----
#### code-example ####
snippet: 26.py
----
image: 8lines.png
----
#### text-block ####
content: What if you need to add points at the beginning and at the end? Easily done.
----
#### code-example ####
snippet: 27.py
----
image: linesOvals.png
----
#### text-block ####
content: Along with drawing, we can perform any kind of calculation. For example, the fill color of a shape could be defined by the identifier provided by the for construct. Here’s an example. 
----
#### code-example ####
snippet: 28.py
----
image: scaleGrey.png
----
#### text-block ####
content: Or we can affect the arguments used to draw the shape itself:
----
#### code-example ####
snippet: 29.py
----
image: lines.png
----
#### text-block ####
content: Remember that <code>if</code> statements can be used in the <code>for</code> body, meaning that we can perform choices within an iterative process:
----
#### code-example ####
snippet: 30.py
----
image: stripes.png
----
#### section-title ####
content: Drawing Many Times in Two Directions
----
class: default
----
#### text-block ####
content: A single <code>for</code> construct allows repetition in one dimension. But, as we have seen with the previous example, other constructs can be used inside the <code>for</code> body. Which means that a second <code>for</code> loop can be nested into the first <code>for</code> loop. In this way the repetition becomes two dimensional.

If we need to draw a table or 90° based pattern, this technique becomes very handy. Consider the following drawing
----
#### image ####
name: matrix.svg
----
class: large-image
----
#### text-block ####
content: This is a bidimensional matrix, it is a simple table. Each element of the matrix is called cell. Each cell of this matrix can be described by two indexes: the index of the column and the row to which the cell belong. If we explicit write each index to each cell we obtain
----
#### image ####
name: matrix-number.svg
----
class: large-image
----
#### text-block ####
content: At this point we only need to define a size for the cell and we are able to draw the left column of the matrix
----
#### code-example ####
snippet: 31.py
----
image: rows4.png
----
#### text-block ####
content: or the bottom row the matrix
----
#### code-example ####
snippet: 32.py
----
image: cols4.png
----
#### text-block ####
content: If we combine the two constructs together we can draw the entire matrix *calling* the <code>rect()</code> function only once
----
#### code-example ####
snippet: 33.py
----
image: rowscols4.png
----
#### text-block ####
content: Matrix indexes can be drawn very easily
----
#### code-example ####
snippet: 34.py
----
image: gridnumbers.png
----
#### text-block ####
content: As for the single <code>for</code> construct, calculations performed within the body can affect the quality of the drawing. A one-dimensional gradient can easily become bi-dimensional
----
#### code-example ####
snippet: 35.py
----
image: matrixRect.png
----
#### text-block ####
content: and an <code>if</code> statement nested into the inner <code>for</code> loop can draw a chess board:
----
#### code-example ####
snippet: 36.py
----
image: chess.png
----
#### text-block ####
content: Please, note that nested for constructs can also be used to navigate nested data structures as a list of tuples:
----
#### code-example ####
snippet: 37.py
----
image: listprinted.png
----
---
hasTocNumber: yes
